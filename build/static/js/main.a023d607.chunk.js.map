{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","length","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","Response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,eACrB,4BAAKF,GACL,2BAAIC,KC6BDK,EAlCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAkBf,OAAQA,EAAOC,OAEb,iCACMD,EAAOE,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CACPC,IAAOD,EACPT,GAAMK,EAAOI,GAAGT,GAChBF,KAAQO,EAAOI,GAAGX,KAClBC,MAASM,EAAOI,GAAGV,WAN7B,KADF,gDCPWY,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACX,2BACAA,UAAU,uCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIPI,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,mBAAoBC,OAAQ,WACjEJ,EAAMK,WCsCJC,G,wDAlCX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAZzC,EAAKC,MAAQ,CACTzB,OAAQ,GACRO,YAAa,IAJR,E,gEAQO,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEtB,OAAQ8B,S,+BAKnC,IAAD,EAC4BC,KAAKN,MAA7BzB,EADJ,EACIA,OAAQO,EADZ,EACYA,YACVyB,EAAiBhC,EAAOiC,QAAO,SAAAC,GACjC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS7B,EAAY4B,kBAEzD,OAAQnC,EAAOC,OAGX,yBAAKL,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAQgC,MAN1B,2C,GAvBMK,c,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a023d607.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id}) => {\n    return(\n        <div className=\"tc bg-light-yellow dib br3 pa3 ma2 grow shadow-5 bw2\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?set=set2`} />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    // return(\n    //     <div>\n    //     {\n    //         robots.map((user, i) => {\n    //             return (\n    //             <Card\n    //             key={i}\n    //             id={robots[i].id} \n    //             name={robots[i].name} \n    //             email={robots[i].email}\n    //             /> \n    //         ); \n    //         })\n    //     }\n    //   </div>\n    // );\n\n    return !robots.length ? \n    <h1>Robot Not Found</h1> : \n    ( <div > {\n            robots.map((user, i) => {\n                return <Card \n                key = {i}\n                id = {robots[i].id}\n                name = {robots[i].name}\n                email = {robots[i].email}\n                />\n            })\n        } </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return(\n        <div className=\"pa3\">\n            <input \n            className=\"pa3 ba b--green bw1 bg-lightest-blue\"\n            type=\"search\" \n            placeholder=\"search robots\"\n            onChange={searchChange}  \n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '3px dotted black', height: '1000px'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: \"\"\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(Response => Response.json())\n        .then(users => {this.setState({ robots: users })});\n    }\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n    render(){\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ?\n            <h1>Loading</h1> :\n            (\n            <div className=\"tc\">\n                <h1 className=\"f1\">RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots}/>\n                </Scroll>\n            </div>\n            )\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}